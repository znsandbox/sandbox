<?php

namespace ZnSandbox\Sandbox\Person2\Rpc\Controllers;

use Illuminate\Support\Collection;
use ZnBundle\Eav\Domain\Entities\AttributeEntity;
use ZnBundle\Eav\Domain\Entities\EntityAttributeEntity;
use ZnBundle\Eav\Domain\Interfaces\Services\EntityAttributeServiceInterface;
use ZnBundle\Eav\Domain\Interfaces\Services\EntityServiceInterface;
use ZnCore\Domain\Helpers\EntityHelper;
use ZnCore\Domain\Libs\Query;
use ZnLib\Rpc\Domain\Entities\RpcRequestEntity;
use ZnLib\Rpc\Domain\Entities\RpcResponseEntity;
use ZnLib\Rpc\Rpc\Base\BaseCrudRpcController;
use ZnSandbox\Sandbox\Person2\Domain\Interfaces\Services\MyContactServiceInterface;

class ContactTypeController extends BaseCrudRpcController
{

//    private $eavEntityService;
    private $entityAttributeService;
    private $entityId;

    public function __construct(MyContactServiceInterface $myContactService, EntityServiceInterface $eavEntityService, EntityAttributeServiceInterface $entityAttributeService)
    {
        $this->service = $myContactService;
//        $this->eavEntityService = $eavEntityService;
        $this->entityAttributeService = $entityAttributeService;

        $entity = $eavEntityService->oneByName('personContact');
        $this->entityId = $entity->getId();
    }

    public function allowRelations(): array
    {
        return [
            'attributesTie.attribute'
        ];
    }

    public function attributesOnly(): array
    {
        return [
            'id',
            'name',
            'type',
            'title',
        ];
    }

    public function add(RpcRequestEntity $requestEntity): RpcResponseEntity
    {
        dd($requestEntity->getParams());
        return parent::add($requestEntity); // TODO: Change the autogenerated stub
    }

    public function all(RpcRequestEntity $requestEntity): RpcResponseEntity
    {
        $query = new Query;
        $query->where('entity_id', $this->entityId);
        $query->with([
            'attribute',
        ]);
        $attributeCollection = $this->entityAttributeService->all($query);
        $collection = new Collection();
        /** @var EntityAttributeEntity $attributeTieEntity */
        foreach ($attributeCollection as $attributeTieEntity) {
            $collection->add($attributeTieEntity->getAttribute());
        }
        return $this->serializeResult($collection);
    }
}
